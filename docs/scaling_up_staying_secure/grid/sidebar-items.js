window.SIDEBAR_ITEMS = {"enum":[["GridBoundaryState","The state the grid is in."],["InfectionState","All possible states that a PV system can have regarding being infected."]],"struct":[["Boundaries","A struct describing the boundaries that are set for type T. If these are exceeded they will be logged. Currently intended for Voltage and Frequency on the grid."],["BoundaryBand","Restriction on the grid. How long may the grid pass the border in the number of steps? Generated from the GridParameters file."],["FreqState","Frequency state of an agent. With frequency, this is only the root node."],["Grid","Struct that defines the grid parameters"],["GridWarning","The warning returned if the grid is outside normal parameters."],["InfectionCount","A helper struct to determine the state of the grid."],["InfectionStatistics","A helper struct to determine the statistics on the infection in the grid."],["NormalBand","What is considered normal behaviour of this parameter? Given by the GridParameters file."],["PowerGeneration","Contains the power generation information for a household."],["PowerState","A struct containing the power state of an agent."],["ReservePower","Grid energy storage, that can be used to regulate."],["SineParam","Contains the parameters of the sine function that create the behaviour. Note, the b attribute goes from 0 to 1 for a whole period. y = a * sin(bx + c) + d"],["VoltState","Voltage state of an agent. With voltage, these are the Netstation agents as they transform the voltage to the familiar 230V."]],"trait":[["BoundaryAgentTrait","A helper trait to enable checking the boundaries"],["BoundaryUnitTrait","Helper trait, to implement on the units used in the boundary checking."],["GridState","A trait to be implemented for the grid states. Gives an interface to work with."]]};